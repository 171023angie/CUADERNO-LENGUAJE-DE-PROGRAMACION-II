## üìòTEMA 1 _ PROGRAMACION ORIENTADA A OBJETOS
Es una paradigma de programacion que organiza el sofware entorno a objetos ,los cuales conbinan datos(atributos)y comportamiento(metodos)en una misma entidad.Estos objetos se basan en clases que funcionan como molde o plantillas que definen sus caracteristicas y acciones.
## Diferencia entre programacion estructurada y P.O.O
## üß© Comparaci√≥n: Programaci√≥n Estructurada vs Programaci√≥n Orientada a Objetos

| **Caracter√≠stica** | **Programaci√≥n Estructurada** | **Programaci√≥n Orientada a Objetos (POO)** |
|---------------------|-------------------------------|---------------------------------------------|
| **Paradigma** | Se basa en procedimientos y funciones que operan sobre datos. | Se basa en objetos que combinan datos y comportamiento. |
| **Organizaci√≥n del C√≥digo** | El programa se divide en funciones o m√≥dulos. | El programa se organiza en **clases** y **objetos**. |
| **Enfoque** | Orientado a **procesos**: la secuencia de instrucciones es lo principal. | Orientado a **entidades**: los objetos del mundo real son lo principal. |
| **Datos** | Los datos son **globales o compartidos**, y pueden ser modificados por cualquier funci√≥n. | Los datos (**atributos**) est√°n **encapsulados** dentro de los objetos y solo son accesibles mediante sus m√©todos. |
| **Reutilizaci√≥n** | **Baja:** se requiere repetir o copiar funciones. | **Alta:** gracias a la **herencia** y **polimorfismo**. |
| **Mantenimiento** | **Dif√≠cil**, porque un cambio en los datos puede afectar muchas funciones. | **M√°s sencillo**, ya que los cambios se a√≠slan en las clases u objetos correspondientes. |

## üß© ¬øQu√© es la Programaci√≥n Orientada a Objetos?

La **POO** es un paradigma de programaci√≥n que organiza el c√≥digo en **clases y objetos**.  
- **Clase:** molde o plantilla que define las caracter√≠sticas y comportamientos de un tipo de objeto.  
- **Objeto:** instancia concreta de una clase.  
- **Atributo:** caracter√≠sticas o propiedades del objeto.  
- **M√©todo:** funciones que describen el comportamiento del objeto.
## EN RESUMEN 
-La paradigma estructurada organiza en funciones y pasos esenciales siendo mas adecuado para programas peque√±os y sencillos.

-La P.O.O organiza el software en clases y objetos,lo cual facilita modularidad , reutilizacion y escalavilidad ,siendo la mas usada en sistemas modernos.
## üåü Ventajas de la Programaci√≥n Orientada a Objetos (P.O.O.)

| **Ventaja** | **Descripci√≥n** |
|--------------|----------------|
| **Modularidad** | El c√≥digo se organiza en **clases y objetos**, lo que facilita la comprensi√≥n, depuraci√≥n y mantenimiento del sistema. |
| **Reutilizaci√≥n de C√≥digo** | Gracias a la **herencia** y al **polimorfismo**, se pueden crear nuevas clases a partir de otras sin repetir c√≥digo. |
| **Encapsulamiento** | Protege los datos internos de los objetos, permitiendo el acceso solo a trav√©s de m√©todos definidos, manteniendo la seguridad de la informaci√≥n. |
| **Abstracci√≥n** | Permite representar entidades del mundo real como modelos computacionales, simplificando la complejidad. |
| **Escalabilidad** | Adecuado para sistemas grandes y complejos, ya que permite dividir el trabajo en m√≥dulos independientes. |
| **Mantenimiento m√°s sencillo** | Los cambios se realizan en clases espec√≠ficas sin afectar todo el sistema. |
| **Flexibilidad y Extensibilidad** | Permite adaptar y ampliar sistemas de manera r√°pida y ordenada. |
| **Productividad** | Facilita el trabajo en equipo: varios programadores pueden desarrollar distintas clases u objetos de forma independiente. |

---

## üíª Aplicaciones de la Programaci√≥n Orientada a Objetos

La **P.O.O.** se aplica ampliamente en el desarrollo de software moderno, ya que permite construir **sistemas modulares, reutilizables y escalables**.  
A continuaci√≥n, algunos ejemplos destacados:

- üñ•Ô∏è **1)Desarrollo de aplicaciones de escritorio:**  
  Utilizada en programas como editores de texto, hojas de c√°lculo, o software de gesti√≥n, donde se representan **ventanas, men√∫s, botones y acciones** como objetos.

- üåê **2)Aplicaciones web y m√≥viles:**  
  Frameworks modernos aplican principios de programacion a objetos para manejar
