🧩 Herencia en Programación Orientada a Objetos (P.O.O)
📘 Herencia

La herencia es un concepto fundamental en la Programación Orientada a Objetos (P.O.O) que permite crear nuevas clases a partir de clases existentes.
La clase nueva (llamada clase derivada o subclase) hereda atributos y métodos de la clase original (llamada clase base o superclase).

👉 Esto facilita:

La reutilización de código.

La organización jerárquica de las clases.

La extensión del comportamiento sin necesidad de reescribir código.

🧠 Herencia Simple

En la herencia simple, una clase derivada hereda de una única clase base.
Esto significa que la subclase solo tiene una superclase directa, lo que la convierte en el tipo de herencia más común y sencillo de implementar.

🗂️ Ejemplo (Diagrama del Post-it)
        ┌────────────┐
        │  Persona   │   ← Superclase
        └─────┬──────┘
              │
    ┌─────────┴──────────┐
    │                    │
┌──────────┐       ┌──────────┐
│  Alumno  │       │ Profesor │
└──────────┘       └──────────┘


Persona → Superclase

Alumno → Subclase

Profesor → Subclase

#EJEMPLO#
## 🧱 Código en Python

```python
# Clase base
class Animal:
    def hacerSonido(self):
        print("Sonido genérico")

# Clase derivada que hereda de Animal
class Perro(Animal):
    def ladrar(self):
        print("¡Guau!")

# Crear un objeto de la clase Perro
perro = Perro()
perro.hacerSonido()  # Método heredado de Animal
perro.ladrar()       # Método propio de Perro

